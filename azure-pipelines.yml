# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- features/*
- master

pool: "Requiem Labs"

variables:
  # temporary, we will get this from SimpleSemVer eventually
  major: '0'
  minor: '2'
  patch: '0'
  prerelease: '-alpha'
  buildnum: $[counter(variables['patch'], 0)]
  version: '$(MAJOR).$(MINOR).$(PATCH)$(PRERELEASE)$(BUILDNUM)'

stages:
- stage: SBN
  displayName: Prebuild work
  jobs:
  - job: SBN
    displayName: Set build number
    steps:
    - powershell: |
          echo "##vso[build.updatebuildnumber]$(VERSION)"
      name: SBN
      displayName: Set build number to version number

- stage: Tests
  displayName: Run tests
  jobs:
  - job: RunTests
    displayName: Pester tests
    steps:
    - task: PowerShell@2
      displayName: 'Install Pester'
      inputs:
        filePath: 'AzureHelperFunctions/InstallPester.ps1'
        failOnStderr: true
        workingDirectory: '$(Pipeline.Workspace)/s'
    - task: PowerShell@2
      displayName: 'Run Pester tests'
      inputs:
        filePath: 'AzureHelperFunctions/RunPester.ps1'
        failOnStderr: true
        workingDirectory: '$(Pipeline.Workspace)/s'
    - task: PublishTestResults@2
      displayName: 'Upload test results'
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/Test*.xml'
        searchFolder: '$(Common.TestResultsDirectory)'
        failTaskOnFailedTests: true
    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(Common.TestResultsDirectory)/CodeCov.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src'

- stage: SetFileVer
  displayName: Set file versions
  jobs:
  - job: IncrementPrerelease
    displayName: 'Increment on prerelease build'
    steps:
      - task: PowerShell@2
        displayName: "Install and increment"
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Checking if repo is registered..."
            $repos = Get-PsRepository
            Write-Host "Repos: $repos"
            if (!$repos.Name -eq "LabPsRepo") {
              Write-Host "Not found. Registering..."
              Register-PSRepository -Name LabPsRepo -SourceLocation '\\vega\LabPsRepo' -InstallationPolicy Trusted -Verbose
            }
            Write-Host "Checking if module is installed..."
            $installed = Get-Module -ListAvailable -Name SimpleSemVer
            if ($installed.Name -ne "SimpleSemVer") {
              Write-Host "Not found. Installing..."
              Install-Module -Name SimpleSemVer -Repository LabPsRepo -AllowPrerelease
            }
            Write-Host "Importing module..."
            Import-Module SimpleSemVer
            $fullVer = Get-SimpleSemVer -File $env:SYSTEM_DEFAULTWORKINGDIRECTORY/version.xml -GetVersionValueWithSpecial
            Write-Host "Version is $fullVer"
            Write-Host "Buildnum? $env:BUILDNUM"
            Remove-Module SimpleSemVer -Force -ErrorAction Ignore
          failOnStderr: true